@model MahjongAccount.Models.ViewModels.RoomViewModel
@{
    Layout = null;
}
@using MahjongAccount.Models
@using MahjongAccount.Models.Dtos

<!DOCTYPE html>
<html lang="zh-CN">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no">
    <title>牌局房间 - 麻将记账</title>
    <link href="~/lib/weui.min.css" rel="stylesheet" />
    <link href="~/css/jquery-weui.min.css" rel="stylesheet" />
    <link href="~/css/font-awesome.min.css" rel="stylesheet" />
    <script src="~/js/signalr.min.js"></script>
    <script src="~/lib/jquery-2.1.4.js"></script>
    <script src="~/js/jquery-weui.js"></script>
    <style>
        .weui-tabbar {
            position: fixed;
            bottom: 0;
            width: 100%;
        }

        body {
            padding-bottom: 50px;
            background-color: #f5f5f5; 
        }

        .page-title {
            text-align: center;
            padding: 15px 0;
            font-size: 18px;
            font-weight: bold;
            border-bottom: 1px solid #eee;
            background-color: #fff; 
        }

        .game-info {
            padding: 10px 15px;
            background-color: #f5f5f5;
            font-size: 14px;
        }

        .players-title {
            padding: 10px 15px;
            font-size: 16px;
            font-weight: 500;
            border-bottom: 1px solid #eee;
            background-color: #fff;
        }

        .players-list {
            display: flex;
            flex-wrap: wrap;
            padding: 10px 15px;
            gap: 15px;
        }

        .player-item {
            display: flex;
            flex-direction: column;
            align-items: center;
            width: 70px;
        }

        .player-avatar {
            width: 60px;
            height: 60px;
            border-radius: 50%;
            margin-bottom: 5px;
            object-fit: cover;
        }

        .player-name {
            font-size: 14px;
            text-align: center;
            white-space: nowrap;
            overflow: hidden;
            text-overflow: ellipsis;
            width: 100%;
        }

        .ready-tag {
            color: #1AAD19;
            font-size: 12px;
            margin-top: 2px;
        }

        .transactions {
            margin-top: 15px;
            padding-bottom: 70px;
            background-color: #fff;
        }

        .transaction-item {
            padding: 10px 15px;
            border-bottom: 1px solid #eee;
            background-color: #fff;
        }

        .transaction-info {
            display: flex;
            justify-content: space-between;
            align-items: center;
        }

        .amount-win {
            color: #E64340;
            font-weight: bold;
        }

        .amount-lose {
            color: #1AAD19;
            font-weight: bold;
        }

        .time-stamp {
            font-size: 12px;
            color: #999;
            margin-top: 5px;
        }

        .action-btn {
            position: fixed;
            bottom: 60px;
            left: 50%;
            transform: translateX(-50%);
            width: 90%;
            display: flex;
            gap: 10px;
        }

        .other-players {
            padding: 15px;
            background-color: #fff;
        }

        .other-player-item {
            display: flex;
            align-items: center;
            justify-content: center;
            padding: 10px 0;
            border-bottom: 1px solid #eee;
        }

        .player-info {
            display: flex;
            flex-direction: column;
            align-items: center;
            margin-right: 15px;
        }

        .player-name {
            font-size: 16px;
            min-width: 60px;
            text-align: center;
        }

        .player-balance {
            font-size: 14px;
            min-width: 60px;
            text-align: center;
        }

        .player-avatar {
            width: 50px;
            height: 50px;
            border-radius: 50%;
            margin-right: 10px;
        }

        .amount-buttons {
            display: flex;
            gap: 8px;
            white-space: nowrap;
        }

        .amount-btn {
            width: 40px;
            height: 30px;
            border: 1px solid #ddd;
            border-radius: 4px;
            background-color: #f5f5f5;
            font-size: 14px;
            cursor: pointer;
            color: #000 !important;
        }

            .amount-btn:active {
                background-color: #e0e0e0;
            }

        .amount-form {
            margin: 0;
            padding: 0;
        }

        .current-user-balance {
            padding: 10px 15px;
            font-weight: bold;
            font-size: 16px;
            background-color: #f5f5f5;
            border-bottom: 1px solid #eee;
        }

        .balance-positive {
            color: red;
        }

        .balance-negative {
            color: #1AAD19;
        }

        .balance-zero {
            color: #000;
        }

        .flow-view-indicator {
            padding: 8px 15px;
            background-color: #fff8e6;
            color: #ff9800;
            font-size: 14px;
            text-align: center;
            border-bottom: 1px solid #ffe0b2;
        }

        .current-user {
            background-color: #C8DCFA;
        }
    </style>
</head>

<body>
    @if (Model.Game == null)
    {
        <div class="page-title">牌局信息加载失败</div>
        <div class="empty-state" style="text-align: center; padding: 30px 0;">
            <i class="fa fa-exclamation-circle" style="font-size: 50px; color: #ccc; margin-bottom: 15px;"></i>
            <p>无法获取牌局信息</p>
            <a href="@Url.Action("Index", "Home")" class="weui-btn weui-btn_default" style="margin-top: 20px;">
                返回首页
            </a>
        </div>
    }
    else
    {
        <div class="page-title">牌局 #@Model.Game.Id</div>
        <div class="game-info">
            开始时间: @Model.Game.CreatedAt.ToString("yyyy-MM-dd HH:mm:ss")
        </div>
        <div class="other-players-container">
            @if (Model.PlayerBalances.ContainsKey(Model.CurrentUserId))
            {
                <div class="current-user-balance">
                    你的结余:
                    <span id="balance_@Model.CurrentUserId" data-amount="@Model.PlayerBalances[Model.CurrentUserId]"
                          class="@(Model.PlayerBalances[Model.CurrentUserId] > 0 ? " balance-positive" :
                Model.PlayerBalances[Model.CurrentUserId] < 0 ? "balance-negative" : "balance-zero" )">
                        ¥@Model.PlayerBalances[Model.CurrentUserId]
                    </span>
                </div>
            }

            <div class="players-title">参与者</div>
            @if (Model.Game.Status == "ongoing")
            {
                <div class="ready-status" style="padding: 10px 15px; text-align: center; color: #666; font-size: 14px; background-color: #fff;">
                    准备状态: @Model.ReadyPlayers/@Model.TotalPlayers 人已准备
                    @if (Model.ReadyPlayers < Model.TotalPlayers)
                    {
                        <span style="color: #999;">（所有人准备后自动结束牌局）</span>
                    }
                </div>
            }

            @if (Model.Players.Any())
            {
                <div class="other-players">
                    @{
                        var otherPlayers = Model.Players.Where(p => p.Id != Model.CurrentUserId).ToList();
                        if (otherPlayers.Any())
                        {
                            foreach (var player in otherPlayers)
                            {
                                <div class="other-player-item">
                                    <img src="@(player.Avatar != null ? $"data:image/jpeg;base64,{Convert.ToBase64String(player.Avatar)}" :
                    $"https://picsum.photos/60/60?random={player.Id}")" alt="@player.Nickname 的头像"
                                         class="player-avatar">

                                    <div class="player-info">
                                        <div class="player-name">
                                            @player.Nickname
                                        </div>
                                        <div id="balance_@player.Id" data-amount="@Model.PlayerBalances[player.Id]" class="player-balance @(Model.PlayerBalances.ContainsKey(player.Id) ?
                                            (Model.PlayerBalances[player.Id] > 0 ? " balance-positive" :
                        Model.PlayerBalances[player.Id] < 0 ? "balance-negative" : "balance-zero" ) : "" )">
                                            @(Model.PlayerBalances.ContainsKey(player.Id) ? $"¥{Model.PlayerBalances[player.Id]}" : "0")
                                        </div>
                                    </div>

                                    <div class="amount-buttons">
                                        @if (Model.Game.Status == "ongoing")
                                            foreach (var amount in new[] { 1, 2, 3, 12, 24, 48 })
                                            {
                                                <button type="button" class="amount-btn" data-amount="@amount"
                                                        data-from-user-id="@Model.CurrentUserId" data-to-user-id="@player.Id"
                                                        data-game-id="@Model.Game.Id" data-to-nickname="@player.Nickname">
                                                    @amount
                                                </button>
                                            }
                                    </div>
                                </div>
                            }
                        }
                        else
                        {
                            <div class="empty-state" style="text-align: center; padding: 30px 0;">
                                <i class="fa fa-users" style="font-size: 50px; color: #ccc; margin-bottom: 15px;"></i>
                                <p>等待其他玩家加入...</p>
                            </div>
                        }
                    }
                </div>
            }
            else
            {
                <div class="empty-state" style="text-align: center; padding: 30px 0;">
                    <i class="fa fa-users" style="font-size: 50px; color: #ccc; margin-bottom: 15px;"></i>
                    <p>暂无参与者信息</p>
                    <button class="weui-btn weui-btn_mini weui-btn_default" onclick="location.reload()">
                        刷新
                    </button>
                </div>
            }
        </div>

        <div class="transactions">
            <div class="players-title">流水记录</div>
            @if (Model.Transactions.Any())
            {
                foreach (var t in Model.Transactions)
                {
                    <div class="transaction-item @(t.ToUserId == Model.CurrentUserId || t.FromUserId == Model.CurrentUserId ? "current-user" : "")">
                        <div class="transaction-info">
                            <div>
                                <span>@t.FromNickname</span>
                                <span> 输给 </span>
                                <span>@t.ToNickname</span>
                            </div>
                            <div class="amount-win">+@t.Amount</div>
                        </div>
                        <div class="time-stamp">@t.CreatedAt.ToString("yyyy-MM-dd HH:mm:ss")</div>
                    </div>
                }
            }
            else
            {
                <div class="empty-state" style="text-align: center; padding: 30px 0;">
                    <i class="fa fa-file-text-o" style="font-size: 50px; color: #ccc; margin-bottom: 15px;"></i>
                    <p>暂无流水记录</p>
                    <p style="font-size: 14px; margin-top: 5px;">开始记录你的第一笔交易吧</p>
                </div>
            }
        </div>

        @if (Model.CurrentUser != null)
        {
            <div class="action-btn" style="margin-bottom: 10px;">
                <button type="button" id="readyButton" class="weui-btn @(Model.Game.Status == "ended" ? "weui-btn_primary" :
            Model.CurrentUser.IsReady ? "weui-btn_default" : "weui-btn_primary" )" style="width: 100%;"
                        data-game-id="@Model.Game.Id" data-is-ready="@Model.CurrentUser.IsReady">
                    @(Model.Game.Status == "ended" ? "查看结算" : Model.CurrentUser.IsReady ? "取消准备" : "准备结束")
                </button>
            </div>
        }

        <div class="weui-tabbar">
            <a href="@Url.Action("Index", "Home")" class="weui-tabbar__item">
                <i class="weui-tabbar__icon fa fa-home"></i>
                <p class="weui-tabbar__label">首页</p>
            </a>
            <a href="@Url.Action("History", "Home")" class="weui-tabbar__item">
                <i class="weui-tabbar__icon fa fa-history"></i>
                <p class="weui-tabbar__label">历史</p>
            </a>
            <a href="#" class="weui-tabbar__item weui-bar__item_on">
                <i class="weui-tabbar__icon fa fa-gamepad"></i>
                <p class="weui-tabbar__label">牌局</p>
            </a>
            <a class="weui-tabbar__item" id="logoutBtn">
                <i class="weui-tabbar__icon fa fa-sign-out"></i>
                <p class="weui-tabbar__label">退出</p>
            </a>
        </div>
    }
    <script>
        // 等待DOM加载完成
        $(document).ready(function() {

            // 退出按钮确认提示
            $('#logoutBtn').on('click', function(e) {
                e.preventDefault();
                const $link = $(this);

                $.confirm({
                    title: '确认退出',
                    text: '确定要退出当前账号吗？',
                    onOK: function() {
                        window.location.href = "@Url.Action("Logout", "Home")";
                    }
                });
            });
            if (`@Model.Game.Status` === 'ongoing') {
                // 1. 初始化SignalR连接
                const connection = new signalR.HubConnectionBuilder()
                    .withUrl("/gameHub")
                    .configureLogging(signalR.LogLevel.Information)
                    .build();

                // 2. 注册服务器推送事件的处理函数
                connection.on("NewTransaction", (data) => {
                    if (data.gameId === @Model.Game.Id) {
                        // 更新输家金额
                        var $currentUserBalance = $(`#balance_${data.fromUserId}`);
                        var currentBalance = parseInt($currentUserBalance.attr('data-amount'));
                        currentBalance -= data.amount;
                        $currentUserBalance.attr('data-amount', currentBalance)
                                           .text(`¥${currentBalance}`)
                                           .removeClass('balance-positive balance-negative balance-zero')
                                           .addClass(currentBalance > 0 ? 'balance-positive' :
                                                    currentBalance < 0 ? 'balance-negative' : 'balance-zero');

                        // 更新赢家金额
                        var $toUserBalance = $(`#balance_${data.toUserId}`);
                        var toBalance = parseInt($toUserBalance.attr('data-amount'));
                        toBalance += data.amount;
                        $toUserBalance.attr('data-amount', toBalance)
                                      .text(`¥${toBalance}`)
                                      .removeClass('balance-positive balance-negative balance-zero')
                                      .addClass(toBalance > 0 ? 'balance-positive' :
                                               toBalance < 0 ? 'balance-negative' : 'balance-zero');

                        // 刷新交易列表
                        fetch(`@Url.Action("Room", "Game", new { gameId = Model.Game.Id, view_flow = "true" })`)
                            .then(response => response.text())
                            .then(html => {
                                document.querySelector(".transactions").innerHTML = new DOMParser()
                                    .parseFromString(html, "text/html")
                                    .querySelector(".transactions").innerHTML;
                            });
                    }
                });

                connection.on("ReadyStatusChanged", (data) => {
                    if (data.gameId === @Model.Game.Id) {
                        const statusHtml = `准备状态: ${data.readyCount}/${data.totalPlayers} 人已准备
                                            ${data.readyCount < data.totalPlayers ?
                                                '<span style="color: #999;">（所有人准备后自动结束牌局）</span>' : ''}`;
                        $('.ready-status').html(statusHtml);

                        // 所有人准备好则跳转结果页
                        if (data.readyCount === data.totalPlayers && data.readyCount > 0) {
                            setTimeout(() => {
                                window.location.href = `@Url.Action("Result", "Game", new { gameId = Model.Game.Id })`;
                            }, 1000);
                        }
                    }
                });

                connection.on("UserJoined", (data) => {
                    if (data.gameId === @Model.Game.Id) {
                        // 显示jQuery WeUI通知
                        $.toast(data.message, {
                            duration: 3000,
                            type: 'success'
                        });

                        // 刷新玩家列表
                        fetch(`@Url.Action("Room", "Game", new { gameId = Model.Game.Id })`)
                            .then(response => response.text())
                            .then(html => {
                                document.querySelector(".other-players").innerHTML = new DOMParser()
                                    .parseFromString(html, "text/html")
                                    .querySelector(".other-players").innerHTML;
                                setbuttonClickEvent();
                            });
                    }
                });

                connection.on("UserLeft", (data) => {
                    if (data.gameId === @Model.Game.Id) {
                        $.toast(data.message, {
                            duration: 3000,
                            type: 'info'
                        });
                    }
                });

                // 3. 启动SignalR连接
                async function startConnection() {
                    try {
                        await connection.start();
                        console.log("SignalR连接成功");
                        await connection.invoke("JoinGame", @Model.Game.Id, @Model.CurrentUserId);
                    } catch (err) {
                        console.error("SignalR连接失败:", err);
                        setTimeout(startConnection, 5000);
                    }
                }
                startConnection();

                // 4. 页面关闭时断开连接
                window.addEventListener("beforeunload", () => {
                    connection.stop();
                });

                // 绑定金额按钮点击事件
                function setButtonClickEvent() {
                    $('.amount-btn').off('click').on('click', async function() {
                        const $btn = $(this);
                        const amount = parseInt($btn.data('amount'));
                        const toNickname = $btn.data('to-nickname');
                        const confirmMessage = `确认要向 ${toNickname || '目标用户'} 转账 ${amount} 元吗？`;

                        // 使用jQuery WeUI的确认对话框
                        $.confirm({
                            title: '确认转账',
                            text: confirmMessage,
                            onOK: async function () {
                                const fromUserId = parseInt($btn.data('from-user-id'));
                                const toUserId = parseInt($btn.data('to-user-id'));
                                const gameId = parseInt($btn.data('game-id'));

                                // 按钮状态处理
                                $btn.prop('disabled', true).css('background-color', '#ccc');

                                try {
                                    const response = await fetch('@Url.Action("RecordTransaction", "Game")', {
                                        method: 'POST',
                                        headers: { 'Content-Type': 'application/json' },
                                        body: JSON.stringify({
                                            GameId: gameId,
                                            FromUserId: fromUserId,
                                            ToUserId: toUserId,
                                            Amount: amount
                                        })
                                    });

                                    const result = await response.json();

                                    if (!result.success) {
                                        $.toast('记录失败: ' + (result.message || '未知错误'), 'forbidden');
                                    } else {
                                        $.toast('记录成功', 'success');
                                    }
                                } catch (error) {
                                    console.error('提交失败:', error);
                                    $.toast('提交失败，请重试', 'forbidden');
                                } finally {
                                    // 恢复按钮状态
                                    $btn.prop('disabled', false).css('background-color', '');
                                }
                            },
                            onCancel: function () {
                                // 用户取消操作
                                return;
                            }
                        });
                    });
                }

                // 初始化准备按钮事件
                function initReadyButton() {
                    $('#readyButton').off('click').on('click', async function() {
                        const $btn = $(this);
                        const gameId = parseInt($btn.data('game-id'));
                        const isReady = $btn.data('is-ready') === true;
                        const newReadyState = !isReady;

                        // 按钮状态处理
                        $btn.prop('disabled', true).html('<i class="fa fa-spinner fa-spin"></i> 处理中...');

                        try {
                            const response = await fetch('@Url.Action("ToggleReady", "Game")', {
                                method: 'POST',
                                headers: { 'Content-Type': 'application/json' },
                                body: JSON.stringify({
                                    gameId: gameId,
                                    isReady: newReadyState
                                })
                            });

                            const result = await response.json();

                            if (result.success) {
                                $btn.data('is-ready', newReadyState)
                                    .removeClass('weui-btn_default weui-btn_primary')
                                    .addClass(newReadyState ? 'weui-btn_default' : 'weui-btn_primary')
                                    .html(newReadyState ? '取消准备' : '准备结束');
                            } else {
                                $.toast('操作失败: ' + (result.message || '未知错误'), 'forbidden');
                                $btn.html(isReady ? '取消准备' : '准备结束');
                            }
                        } catch (error) {
                            console.error('准备状态更新失败:', error);
                            $.toast('操作失败，请重试', 'forbidden');
                            $btn.html(isReady ? '取消准备' : '准备结束');
                        } finally {
                            $btn.prop('disabled', false);
                        }
                    });
                }

                // 初始化事件
                setButtonClickEvent();
                initReadyButton();
            }

            // 牌局已结束逻辑
            if (`@Model.Game.Status` === 'ended') {
                $('#readyButton').off('click').on('click', function() {
                    window.location.href = `@Url.Action("Result", "Game", new { gameId = Model.Game.Id })`;
                });
            }
        });
    </script>
</body>

</html>
