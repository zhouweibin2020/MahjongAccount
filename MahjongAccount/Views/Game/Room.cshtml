@model MahjongAccount.Models.ViewModels.RoomViewModel
@{
    Layout = null;
}
@using MahjongAccount.Models
@using MahjongAccount.Models.Dtos

<!DOCTYPE html>
<html lang="zh-CN">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no">
    <title>牌局房间 - 麻将记账</title>
    <link href="~/lib/weui.min.css" rel="stylesheet" />
    <link href="~/css/jquery-weui.min.css" rel="stylesheet" />
    <link href="~/css/font-awesome.min.css" rel="stylesheet" />
    <script src="~/js/signalr.min.js"></script>
    <script src="~/lib/jquery-2.1.4.js"></script>
    <script src="~/js/jquery-weui.js"></script>
    <style>
        .weui-tabbar {
            position: fixed;
            bottom: 0;
            width: 100%;
        }

        body {
            padding-bottom: 50px;
            background-color: #f5f5f5;
            margin: 0;
            overflow-x: hidden;
        }

        .page-title {
            text-align: center;
            padding: 15px 0;
            font-size: 18px;
            font-weight: bold;
            border-bottom: 1px solid #eee;
            background-color: #fff;
        }

        /* 游戏信息区域样式 */
        .game-info {
            padding: 10px 15px;
            background-color: #f5f5f5;
            font-size: 14px;
            display: flex;
            justify-content: space-between;
            align-items: center;
        }

        .connect-btn {
            background-color: #09BB07;
            color: white;
            border: none;
            border-radius: 4px;
            margin-left: 5px;
            padding: 5px 12px;
            font-size: 14px;
            cursor: pointer;
            height: 34px;
        }

        /* 刷新按钮样式 - 与准备按钮高度一致 */
        .refresh-btn {
            background-color: #09BB07;
            color: white;
            border: none;
            border-radius: 4px;
            padding: 5px 10px;
            font-size: 14px;
            display: flex;
            align-items: center;
            cursor: pointer;
            height: 34px;
            box-sizing: border-box;
        }

            .refresh-btn i {
                margin-right: 5px;
            }

            .refresh-btn:active {
                background-color: #089606;
            }

        .players-title {
            padding: 10px 15px;
            font-size: 16px;
            font-weight: 500;
            border-bottom: 1px solid #eee;
            background-color: #fff;
            display: flex;
            justify-content: space-between;
            align-items: center;
        }

        .change-wind-btn {
            background-color: #2D8CF0;
            color: white;
            border: none;
            border-radius: 4px;
            padding: 5px 10px;
            font-size: 14px;
            cursor: pointer;
            display: flex;
            align-items: center;
            height: 34px;
        }

            .change-wind-btn i {
                margin-right: 5px;
            }

            .change-wind-btn:active {
                background-color: #1C74D4;
            }

        .players-list {
            display: flex;
            flex-wrap: wrap;
            padding: 10px 15px;
            gap: 15px;
        }

        .player-item {
            display: flex;
            flex-direction: column;
            align-items: center;
            width: 70px;
        }

        .player-avatar {
            width: 60px;
            height: 60px;
            border-radius: 50%;
            margin-bottom: 5px;
            object-fit: cover;
        }

        .player-name {
            font-size: 14px;
            text-align: center;
            white-space: nowrap;
            overflow: hidden;
            text-overflow: ellipsis;
            width: 100%;
        }

        .ready-tag {
            color: #1AAD19;
            font-size: 12px;
            margin-top: 2px;
        }

        .transactions {
            margin-top: 15px;
            padding-bottom: 70px;
            background-color: #fff;
        }

        .transaction-item {
            padding: 10px 15px;
            border-bottom: 1px solid #eee;
            background-color: #fff;
        }

        .transaction-info {
            display: flex;
            justify-content: space-between;
            align-items: center;
        }

        .amount-win {
            color: #E64340;
            font-weight: bold;
        }

        .amount-lose {
            color: #1AAD19;
            font-weight: bold;
        }

        .time-stamp {
            font-size: 12px;
            color: #999;
            margin-top: 5px;
        }

        .action-btn {
            position: fixed;
            bottom: 60px;
            left: 50%;
            transform: translateX(-50%);
            width: 90%;
            display: flex;
            gap: 10px;
        }

        .other-players {
            padding: 15px;
            background-color: #fff;
        }

        .other-player-item {
            display: flex;
            align-items: center;
            justify-content: center;
            padding: 10px 0;
            border-bottom: 1px solid #eee;
        }

        .player-info {
            display: flex;
            flex-direction: column;
            align-items: center;
            margin-right: 15px;
        }

        .player-name {
            font-size: 16px;
            min-width: 60px;
            text-align: center;
        }

        .player-balance {
            font-size: 14px;
            min-width: 60px;
            text-align: center;
        }

        .player-avatar {
            width: 50px;
            height: 50px;
            border-radius: 50%;
            margin-right: 10px;
        }

        .amount-buttons {
            display: flex;
            gap: 8px;
            white-space: nowrap;
        }

        .amount-btn {
            width: 40px;
            height: 30px;
            border: 1px solid #ddd;
            border-radius: 4px;
            background-color: #f5f5f5;
            font-size: 14px;
            cursor: pointer;
            color: #000 !important;
        }

            .amount-btn:active {
                background-color: #e0e0e0;
            }

        .amount-form {
            margin: 0;
            padding: 0;
        }

        .current-user-balance {
            padding: 10px 15px;
            font-weight: bold;
            font-size: 16px;
            background-color: #f5f5f5;
            border-bottom: 1px solid #eee;
        }

        .balance-positive {
            color: red;
        }

        .balance-negative {
            color: #1AAD19;
        }

        .balance-zero {
            color: #000;
        }

        .flow-view-indicator {
            padding: 8px 15px;
            background-color: #fff8e6;
            color: #ff9800;
            font-size: 14px;
            text-align: center;
            border-bottom: 1px solid #ffe0b2;
        }

        .current-user {
            background-color: #C8DCFA;
        }

        .signalr-connected {
            color: #1AAD19 !important;
            font-weight: bold;
        }

        .signalr-disconnection {
            color: #E64340 !important;
            font-weight: bold;
        }

        .direction {
            color: #E64340 !important;
            font-weight: bold;
        }

        /* 开关样式 */
        .filter-switch {
            display: flex;
            align-items: center;
            font-size: 14px;
        }

        .weui-switch {
            margin-right: 5px;
        }

        /* 准备状态区域样式调整 */
        .ready-status-container {
            display: flex;
            padding: 10px 15px;
            text-align: center;
            color: #666;
            font-size: 14px;
            background-color: #fff;
            justify-content: center;
            align-items: center;
            flex-wrap: wrap;
        }

            .ready-status-container > div {
                flex: 0 0 auto;
            }

        .ready-btn {
            background-color: #09BB07;
            color: white;
            border: none;
            border-radius: 4px;
            padding: 5px 10px;
            font-size: 14px;
            display: flex;
            align-items: center;
            justify-content: center;
            cursor: pointer;
            box-sizing: border-box;
            height: 34px;
        }

            .ready-btn i {
                margin-right: 5px;
            }

            .ready-btn:active {
                background-color: #089606;
            }

            .ready-btn.cancel-ready {
                background-color: #F7BA1E;
            }

                .ready-btn.cancel-ready:active {
                    background-color: #E6A600;
                }

            .ready-btn.loading {
                opacity: 0.8;
                cursor: not-allowed;
            }
    </style>
</head>

<body>
    <!-- 主内容容器 -->
    <div class="content-container" id="contentContainer">
        @if (Model.Game == null)
        {
            <div class="page-title">牌局信息加载失败</div>
            <div class="empty-state" style="text-align: center; padding: 30px 0;">
                <i class="fa fa-exclamation-circle" style="font-size: 50px; color: #ccc; margin-bottom: 15px;"></i>
                <p>无法获取牌局信息</p>
                <a href="@Url.Action("Index", "Home", new { autoGoGame = false })" class="weui-btn weui-btn_default" style="margin-top: 20px;">
                    返回首页
                </a>
            </div>
        }
        else
        {
            <div class="page-title">牌局 #@Model.Game.Id 《@Model.Game.Name》 <span class="direction">首庄：@Model.Game.BeginDirection</span></div>
            <div class="game-info">
                <span>
                    开始时间: @Model.Game.CreatedAt.ToString("yyyy-MM-dd HH:mm:ss")
                    <span id="signalrState" style="margin-left: 10px;"></span>
                    <button type="button" class="connect-btn" id="signalr-connect" style="display: none;">
                        <i class="fa fa-refresh"></i>
                    </button>
                </span>
                <button type="button" class="refresh-btn" id="manualRefreshBtn">
                    <i class="fa fa-refresh"></i>
                    <span>刷新</span>
                </button>
            </div>
            <div class="other-players-container">
                @if (Model.PlayerBalances.ContainsKey(Model.CurrentUserId))
                {
                    <div class="current-user-balance">
                        <span id="direction_@Model.CurrentUserId" class="direction">@Model.CurrentUser.Direction</span>
                        你的结余:
                        <span id="balance_@Model.CurrentUserId" data-amount="@Model.PlayerBalances[Model.CurrentUserId]"
                              class="@(Model.PlayerBalances[Model.CurrentUserId] > 0 ? " balance-positive" :
                    Model.PlayerBalances[Model.CurrentUserId] < 0 ? "balance-negative" : "balance-zero" )">
                            ¥@Model.PlayerBalances[Model.CurrentUserId]
                        </span>
                    </div>
                }

                <div class="players-title">
                    <span>参与者</span>
                    @if (Model.Game.Status == "ongoing")
                    {
                        <button type="button" class="change-wind-btn" id="changeWindBtn">
                            <i class="fa fa-refresh"></i>
                            <span>换风</span>
                        </button>
                    }
                </div>
                @if (Model.Game.Status == "ongoing")
                {
                    <div class="ready-status-container">
                        <div class="ready-status-info">
                            @Model.ReadyPlayers/@Model.TotalPlayers 人已准备
                            @if (Model.ReadyPlayers < Model.TotalPlayers)
                            {
                                <span style="color: #999;">（所有人准备后自动结束牌局）</span>
                            }
                        </div>

                        @if (Model.CurrentUser != null)
                        {
                            <div class="ready-button-wrapper">
                                <button type="button" id="readyButton" class="ready-btn @(Model.CurrentUser.IsReady ? "cancel-ready" : "")"
                                        data-game-id="@Model.Game.Id" data-is-ready="@Model.CurrentUser.IsReady">
                                    @if (Model.CurrentUser.IsReady)
                                    {
                                        <i class="fa fa-times"></i>
                                        <span>取消准备</span>
                                    }
                                    else
                                    {
                                        <i class="fa fa-check"></i>
                                        <span>准备结束</span>
                                    }
                                </button>
                            </div>
                        }
                    </div>
                }

                @if (Model.Players.Any())
                {
                    <div class="other-players" id="playersContainer">
                        @{
                            var otherPlayers = Model.Players.Where(p => p.Id != Model.CurrentUserId).ToList();
                            if (otherPlayers.Any())
                            {
                                foreach (var player in otherPlayers)
                                {
                                    <div class="other-player-item">
                                        <img src="@(!string.IsNullOrEmpty(player.AvatarUrl) ? player.AvatarUrl :
                        $"https://picsum.photos/60/60?random={player.Id}")" alt="@player.Nickname 的头像"
                                             class="player-avatar">

                                        <div class="player-info">
                                            <div class="player-name">
                                                <span id="direction_@player.Id" class="direction">@player.Direction</span>
                                                @player.Nickname
                                            </div>
                                            <div id="balance_@player.Id" data-amount="@Model.PlayerBalances[player.Id]" class="player-balance @(Model.PlayerBalances.ContainsKey(player.Id) ?
                                                (Model.PlayerBalances[player.Id] > 0 ? " balance-positive" :
                            Model.PlayerBalances[player.Id] < 0 ? "balance-negative" : "balance-zero" ) : "" )">
                                                @(Model.PlayerBalances.ContainsKey(player.Id) ? $"¥{Model.PlayerBalances[player.Id]}" : "0")
                                            </div>
                                        </div>

                                        <div class="amount-buttons">
                                            @if (Model.Game.Status == "ongoing")
                                            {
                                                var btns = Model.Game.Type == "川麻" ? new[] { "杠", "2", "12", "24", "48" } : new[] { "1", "2", "4", "8", "宝中宝", "其他" };
                                                foreach (var amount in btns)
                                                {
                                                    <button type="button" class="amount-btn" style="@(amount == "宝中宝" ? "width: 50px;" : "" )" data-amount="@amount"
                                                            data-from-user-id="@Model.CurrentUserId" data-to-user-id="@player.Id"
                                                            data-game-id="@Model.Game.Id" data-to-nickname="@player.Nickname">
                                                        @amount
                                                    </button>
                                                }
                                            }
                                        </div>
                                    </div>
                                }
                            }
                            else
                            {
                                <div class="empty-state" style="text-align: center; padding: 30px 0;">
                                    <i class="fa fa-users" style="font-size: 50px; color: #ccc; margin-bottom: 15px;"></i>
                                    <p>等待其他玩家加入...</p>
                                </div>
                            }
                        }
                    </div>
                }
                else
                {
                    <div class="empty-state" style="text-align: center; padding: 30px 0;">
                        <i class="fa fa-users" style="font-size: 50px; color: #ccc; margin-bottom: 15px;"></i>
                        <p>暂无参与者信息</p>
                        <button class="weui-btn weui-btn_mini weui-btn_default" onclick="refreshPage()">
                            刷新
                        </button>
                    </div>
                }
            </div>

            <div class="transactions" id="transactionsContainer">
                <div class="players-title">
                    <span>流水记录</span>
                    <label class="filter-switch">
                        <input type="checkbox" class="weui-switch" id="onlyMyTransactions">
                        <span>只看自己</span>
                    </label>
                </div>
                @if (Model.Transactions.Any())
                {
                    foreach (var t in Model.Transactions)
                    {
                        <div class="transaction-item @(t.ToUserId == Model.CurrentUserId || t.FromUserId == Model.CurrentUserId ? "current-user" : "")"
                             data-involves-current="@(t.ToUserId == Model.CurrentUserId || t.FromUserId == Model.CurrentUserId ? "true" : "false")">
                            <div class="transaction-info">
                                <div>
                                    <span>@t.FromNickname</span>
                                    <span> 输给 </span>
                                    <span>@t.ToNickname</span>
                                </div>
                                <div class="amount-win">+@t.Amount</div>
                            </div>
                            <div class="time-stamp">@t.CreatedAt.ToString("yyyy-MM-dd HH:mm:ss")</div>
                        </div>
                    }
                }
                else
                {
                    <div class="empty-state" style="text-align: center; padding: 30px 0;">
                        <i class="fa fa-file-text-o" style="font-size: 50px; color: #ccc; margin-bottom: 15px;"></i>
                        <p>暂无流水记录</p>
                        <p style="font-size: 14px; margin-top: 5px;">开始记录你的第一笔交易吧</p>
                    </div>
                }
            </div>

            @if (Model.CurrentUser != null && Model.Game.Status == "ended")
            {
                <div class="action-btn" style="margin-bottom: 10px;">
                    <button type="button" id="resultButton" class="weui-btn weui-btn_primary" style="width: 100%;"
                            data-game-id="@Model.Game.Id">
                        查看结算
                    </button>
                </div>
            }

            <div class="weui-tabbar">
                <a href="@Url.Action("Index", "Home", new { autoGoGame = false })" class="weui-tabbar__item">
                    <i class="weui-tabbar__icon fa fa-home"></i>
                    <p class="weui-tabbar__label">首页</p>
                </a>
                <a href="@Url.Action("History", "Home")" class="weui-tabbar__item">
                    <i class="weui-tabbar__icon fa fa-history"></i>
                    <p class="weui-tabbar__label">历史</p>
                </a>
                <a href="#" class="weui-tabbar__item weui-bar__item_on">
                    <i class="weui-tabbar__icon fa fa-gamepad"></i>
                    <p class="weui-tabbar__label">牌局</p>
                </a>
            </div>
        }
    </div>

    <script>
        // 等待DOM加载完成
        $(document).ready(function() {
            // 从Model初始化当前已在房间的玩家ID集合
            const initialPlayerIds = new Set();
        @foreach (var player in Model.Players)
        {
            @:initialPlayerIds.add(@player.Id);
        }

            // 初始化按钮事件
            initRefreshButton();

            // 初始化流水记录过滤开关
            initTransactionFilter();

            // 初始化换风按钮
            initChangeWindButton();

            // 全局SignalR连接状态管理
            let isConnecting = false;  // 防止重复连接的标记
            let connection;
            let reconnectDelay = 1000; // 初始重连延迟（毫秒）
            const maxReconnectDelay = 30000; // 最大重连延迟（30秒）

            if (`@Model.Game.Status` === 'ongoing') {
                // 1. 初始化SignalR连接
                function initConnection() {
                    if (!connection) {
                        connection = new signalR.HubConnectionBuilder()
                            .withUrl("/gameHub")
                            .configureLogging(signalR.LogLevel.Information)
                            .build();

                        // 2. 注册服务器推送事件的处理函数
                        connection.on("NewTransaction", (data) => {
                            try {
                                if (data.gameId === @Model.Game.Id) {
                                    // 更新输家金额
                                    var $currentUserBalance = $(`#balance_${data.fromUserId}`);
                                    var currentBalance = parseInt($currentUserBalance.attr('data-amount'));
                                    currentBalance -= data.amount;
                                    $currentUserBalance.attr('data-amount', currentBalance)
                                                       .text(`¥${currentBalance}`)
                                                       .removeClass('balance-positive balance-negative balance-zero')
                                                       .addClass(currentBalance > 0 ? 'balance-positive' :
                                                                currentBalance < 0 ? 'balance-negative' : 'balance-zero');

                                    // 更新赢家金额
                                    var $toUserBalance = $(`#balance_${data.toUserId}`);
                                    var toBalance = parseInt($toUserBalance.attr('data-amount'));
                                    toBalance += data.amount;
                                    $toUserBalance.attr('data-amount', toBalance)
                                                  .text(`¥${toBalance}`)
                                                  .removeClass('balance-positive balance-negative balance-zero')
                                                  .addClass(toBalance > 0 ? 'balance-positive' :
                                                           toBalance < 0 ? 'balance-negative' : 'balance-zero');

                                    // 刷新交易列表
                                    refreshTransactions();

                                    // 应用当前过滤状态
                                    applyTransactionFilter();
                                }
                            } catch (err) {
                                console.error("NewTransaction刷新失败:", err);
                                $.toptip('刷新记账失败', 'error', 2000);
                            }
                        });

                        connection.on("ReadyStatusChanged", (data) => {
                            if (data.gameId === @Model.Game.Id) {
                                const statusHtml = `${data.readyCount}/${data.totalPlayers} 人已准备
                                                    ${data.readyCount < data.totalPlayers ?
                                                        '<span style="color: #999;">（所有人准备后自动结束牌局）</span>' : ''}`;
                                $('.ready-status-info').html(statusHtml);

                                // 所有人准备好则跳转结果页
                                if (data.readyCount === data.totalPlayers && data.readyCount > 0) {
                                    setTimeout(() => {
                                        window.location.href = `@Url.Action("Result", "Game", new { gameId = Model.Game.Id })`;
                                    }, 1000);
                                }
                            }
                        });

                        connection.on("WindChanged", (data) => {
                            if (data.gameId === @Model.Game.Id) {
                                // 刷新玩家列表
                                for (let direction of data.newDirections) {
                                    $(`#direction_${direction.userId}`).text(direction.direction);;
                                }
                            }
                        });

                        connection.on("UserJoined", (data) => {
                            if (data.gameId === @Model.Game.Id) {
                                // 检查用户是否是新加入的（不在初始玩家列表中）
                                if (!initialPlayerIds.has(data.userId)) {
                                    // 显示顶部提示
                                    $.toptip(data.message, 'success', 3000);
                                    // 将新用户添加到集合中，避免重复通知
                                    initialPlayerIds.add(data.userId);

                                    // 刷新玩家列表
                                    refreshPlayers();
                                }
                            }
                        });

                        // 连接关闭时自动重连（指数退避策略）
                        connection.onclose(async (error) => {
                            $('#signalrState').text('连接断开');
                            $('#signalr-connect').show();
                            $('#signalrState').removeClass('signalr-connected').addClass('signalr-disconnection');
                            await new Promise(resolve => setTimeout(resolve, reconnectDelay));
                            // 重连延迟指数增长（避免频繁重试）
                            reconnectDelay = Math.min(reconnectDelay * 2, maxReconnectDelay);
                            await startConnection(); // 递归重连
                        });
                    }
                    return connection;
                }

                // 3. 启动SignalR连接（添加状态检查）
                async function startConnection() {
                    // 确保连接实例已初始化
                    initConnection();

                    // 关键：检查当前连接状态，避免重复启动
                    if (connection.state === "Connected") {
                        console.log("SignalR已处于连接状态，无需重复启动");
                        return;
                    }
                    if (isConnecting) {
                        console.log("SignalR正在连接中，请等待...");
                        return;
                    }

                    try {
                        isConnecting = true; // 标记为正在连接
                        await connection.start()
                            .then(() => {
                                console.log("SignalR连接成功");
                                $('#signalrState').text('连接正常');
                                $('#signalr-connect').hide();
                                $('#signalrState').removeClass('signalr-disconnection').addClass('signalr-connected');
                                reconnectDelay = 1000; // 重置重连延迟
                                return connection.invoke("JoinGame", @Model.Game.Id, @Model.CurrentUserId);
                            })
                            .catch(err => {
                                throw err;
                            });
                    } catch (err) {
                        $('#signalrState').text('连接异常');
                        $('#signalr-connect').show();
                        $('#signalrState').removeClass('signalr-connected').addClass('signalr-disconnection');
                        console.error("SignalR连接失败:", err);
                        $.toptip('连接失败，正在重试', 'error', 2000);
                    } finally {
                        isConnecting = false; // 重置连接状态
                    }
                }

                // 启动连接
                startConnection();

                function initConnectButton() {
                    const $connectBtn = $('#signalr-connect');

                    $connectBtn.on('click', async function() {
                        // 防止重复点击
                        if ($connectBtn.hasClass('loading')) {
                            return;
                        }

                        // 显示加载状态 - 使用Font Awesome的fa-spin类
                        $connectBtn.addClass('loading');
                        const originalIcon = $connectBtn.find('i').attr('class');
                        $connectBtn.find('i').attr('class', 'fa fa-spinner fa-spin');

                        try {
                            // 执行连接操作
                            startConnection();
                        } catch (error) {
                            console.error('连接失败:', error);
                        } finally {
                            // 恢复按钮状态
                            $connectBtn.removeClass('loading');
                            $connectBtn.find('i').attr('class', originalIcon);
                        }
                    });
                }

                initConnectButton();

                // 4. 页面关闭时断开连接
                window.addEventListener("beforeunload", () => {
                    if (connection && connection.state === "Connected") {
                        connection.stop();
                    }
                });
            }

            // 绑定金额按钮点击事件
            setButtonClickEvent();

            // 初始化准备按钮事件
            initReadyButton();

            // 初始化查看结算按钮事件（如果牌局已结束）
        @if (Model.Game.Status == "ended")
        {
            @:initResultButton();
        }
        });

        // 初始化换风按钮
        function initChangeWindButton() {
            const $changeWindBtn = $('#changeWindBtn');

            if ($changeWindBtn.length === 0) return;

            $changeWindBtn.on('click', async function() {
                // 防止重复点击
                if ($changeWindBtn.hasClass('loading')) {
                    return;
                }

                // 显示确认对话框
                $.confirm({
                    title: '确认换风',
                    text: '确定要换风吗？',
                    onOK: async function() {
                        // 显示加载状态
                        $changeWindBtn.addClass('loading');
                        const originalIcon = $changeWindBtn.find('i').attr('class');
                        const originalText = $changeWindBtn.find('span').text();
                        $changeWindBtn.find('i').attr('class', 'fa fa-spinner fa-spin');
                        $changeWindBtn.find('span').text('更换中...');

                        try {
                            const response = await fetch('@Url.Action("ChangeWind", "Game")', {
                                method: 'POST',
                                headers: { 'Content-Type': 'application/json' },
                                body: JSON.stringify({
                                    gameId: @Model.Game.Id
                                })
                            });

                            // 检查HTTP状态码
                            if (!response.ok) {
                                if (response.status === 400) {
                                    const error = await response.json();
                                    $.toptip('请求错误: ' + (error.message || '参数不正确'), 'error');
                                } else if (response.status === 404) {
                                    $.toptip('找不到牌局信息', 'error');
                                } else {
                                    $.toptip('服务器错误: ' + response.status, 'error');
                                }
                                return;
                            }

                            const result = await response.json();

                            if (!result.success) {
                                $.toptip('换风失败: ' + (result.message || '未知错误'), 'error');
                            } else {
                                $.toptip('换风成功', 'success');
                            }
                        } catch (error) {
                            console.error('换风失败:', error);
                            $.toptip('换风失败，请重试', 'error');
                        } finally {
                            // 恢复按钮状态
                            $changeWindBtn.removeClass('loading');
                            $changeWindBtn.find('i').attr('class', originalIcon);
                            $changeWindBtn.find('span').text(originalText);
                        }
                    }
                });
            });
        }

        // 初始化流水记录过滤开关
        function initTransactionFilter() {
            const $switch = $('#onlyMyTransactions');

            // 从本地存储加载上次状态（如果有）
            const savedState = localStorage.getItem('onlyMyTransactions_@Model.Game.Id');
            if (savedState !== null) {
                $switch.prop('checked', savedState === 'true');
            }

            // 应用初始过滤状态
            applyTransactionFilter();

            // 绑定开关事件
            $switch.on('change', function() {
                const isChecked = $(this).prop('checked');
                // 保存状态到本地存储
                localStorage.setItem('onlyMyTransactions_@Model.Game.Id', isChecked);
                // 应用过滤
                applyTransactionFilter();
            });
        }

        // 应用流水记录过滤
        function applyTransactionFilter() {
            const isChecked = $('#onlyMyTransactions').prop('checked');
            const $transactions = $('.transaction-item');

            if (isChecked) {
                // 只显示涉及当前用户的记录
                $transactions.each(function() {
                    const involvesCurrent = $(this).data('involves-current') === true;
                    $(this).toggle(involvesCurrent);
                });

                // 检查是否有显示的记录，如果没有显示提示
                const hasVisible = $transactions.filter(':visible').length > 0;
                if (!hasVisible) {
                    // 如果没有可见记录，显示提示
                    if (!$('.no-visible-transactions').length) {
                        $('#transactionsContainer').append(`
                            <div class="no-visible-transactions empty-state" style="text-align: center; padding: 30px 0;">
                                <i class="fa fa-filter" style="font-size: 50px; color: #ccc; margin-bottom: 15px;"></i>
                                <p>没有找到与你相关的流水记录</p>
                                <button class="weui-btn weui-btn_mini weui-btn_default" onclick="$('#onlyMyTransactions').prop('checked', false).trigger('change')">
                                    查看全部
                                </button>
                            </div>
                        `);
                    }
                } else {
                    // 如果有可见记录，移除提示
                    $('.no-visible-transactions').remove();
                }
            } else {
                // 显示所有记录
                $transactions.show();
                // 移除提示
                $('.no-visible-transactions').remove();
            }
        }

        // 初始化事件
        function initRefreshButton() {
            const $refreshBtn = $('#manualRefreshBtn');

            $refreshBtn.on('click', async function() {
                // 防止重复点击
                if ($refreshBtn.hasClass('loading')) {
                    return;
                }

                // 显示加载状态 - 使用Font Awesome的fa-spin类
                $refreshBtn.addClass('loading');
                const originalIcon = $refreshBtn.find('i').attr('class');
                $refreshBtn.find('i').attr('class', 'fa fa-spinner fa-spin');
                const originalText = $refreshBtn.find('span').text();
                $refreshBtn.find('span').text('刷新中...');

                try {
                    // 执行刷新操作
                    await refreshPage();
                } catch (error) {
                    console.error('刷新失败:', error);
                } finally {
                    // 恢复按钮状态
                    $refreshBtn.removeClass('loading');
                    $refreshBtn.find('i').attr('class', originalIcon);
                    $refreshBtn.find('span').text(originalText);
                }
            });
        }

        // 页面整体刷新 - 返回Promise便于异步处理
        function refreshPage() {
            return new Promise((resolve, reject) => {
                $.showLoading('刷新中...');

                fetch('@Url.Action("Room", "Game", new { gameId = Model.Game.Id })')
                    .then(response => {
                        if (!response.ok) {
                            throw new Error('网络响应不正常');
                        }
                        return response.text();
                    })
                    .then(html => {
                        const newDoc = new DOMParser().parseFromString(html, "text/html");

                        // 更新玩家列表
                        const $newPlayers = $(newDoc).find('#playersContainer').html();
                        $('#playersContainer').html($newPlayers);

                        // 更新交易记录
                        const $newTransactions = $(newDoc).find('#transactionsContainer').html();
                        $('#transactionsContainer').html($newTransactions);

                        // 更新准备状态
                        const $newReadyStatus = $(newDoc).find('.ready-status-info').html();
                        if ($newReadyStatus) {
                            $('.ready-status-info').html($newReadyStatus);
                        }

                        // 更新准备按钮状态
                        const $newReadyButton = $(newDoc).find('#readyButton');
                        if ($newReadyButton.length) {
                            $('#readyButton').replaceWith($newReadyButton);
                            initReadyButton(); // 重新初始化准备按钮事件
                        }

                        // 更新当前庄位信息
                        const newDirection = $(newDoc).find('.page-title .direction').text();
                        $('.page-title .direction').text(newDirection);

                        // 更新当前用户余额
                        const $newBalance = $(newDoc).find(`#balance_@Model.CurrentUserId`).clone();
                        $(`#balance_@Model.CurrentUserId`).replaceWith($newBalance);

                        // 重新绑定事件
                        setButtonClickEvent();
                        initTransactionFilter(); // 重新初始化过滤器

                        // 隐藏加载提示
                        $.hideLoading();
                        $.toptip('刷新成功', 'success', 1000);
                        resolve();
                    })
                    .catch(error => {
                        console.error('刷新失败:', error);
                        $.hideLoading();
                        $.toptip('刷新失败，请重试', 'error');
                        reject(error);
                    });
            });
        }

        // 刷新玩家列表
        function refreshPlayers() {
            fetch('@Url.Action("Room", "Game", new { gameId = Model.Game.Id })')
                .then(response => response.text())
                .then(html => {
                    const $newPlayers = $(new DOMParser().parseFromString(html, "text/html")).find('#playersContainer').html();
                    $('#playersContainer').html($newPlayers);
                    setButtonClickEvent();
                });
        }

        // 刷新交易记录
        function refreshTransactions() {
            fetch('@Url.Action("Room", "Game", new { gameId = Model.Game.Id, view_flow = "true" })')
                .then(response => response.text())
                .then(html => {
                    const $newTransactions = $(new DOMParser().parseFromString(html, "text/html")).find('#transactionsContainer').html();
                    $('#transactionsContainer').html($newTransactions);
                    // 重新初始化过滤器以确保新记录也能被正确过滤
                    initTransactionFilter();
                });
        }

        // 绑定金额按钮点击事件
        function setButtonClickEvent() {
            $('.amount-btn').off('click').on('click', async function() {
                const $btn = $(this);
                var text = $btn.data('amount');
                switch(text){
                    case "杠":
                        $.modal({
                            title: "杠",
                            buttons: [
                                { text: "1", onClick: async function(){ await recordTransaction($btn, 1); } },
                                { text: "2", onClick: async function(){ await recordTransaction($btn, 2); } },
                                { text: "3", onClick: async function(){ await recordTransaction($btn, 3); } },
                                { text: "4", onClick: async function(){ await recordTransaction($btn, 4); } },
                                { text: "6", onClick: async function(){ await recordTransaction($btn, 6); } },
                                { text: "取消", className: "default" },
                            ]
                        });
                        break;
                    case "宝中宝":
                        $.modal({
                            title: "宝中宝",
                            buttons: [
                                { text: "16", onClick: async function(){ await recordTransaction($btn, 16); } },
                                { text: "32", onClick: async function(){ await recordTransaction($btn, 32); } },
                                { text: "64", onClick: async function(){ await recordTransaction($btn, 64); } },
                                { text: "取消", className: "default" },
                            ]
                        });
                        break;
                    case "其他":
                        $.prompt({
                            title: "输入金额",
                            inputType: "number",
                            onOK: async function (text) {
                                // 验证输入是否为有效数字
                                const numberValue = parseFloat(text);
                                if (isNaN(numberValue) || text.trim() === "") {
                                    // 输入无效时提示并重新显示输入框
                                    $.alert("请输入有效的数字", "输入错误");
                                    return false; // 阻止关闭对话框
                                }
                                await recordTransaction($btn, numberValue);
                            }                        });
                        break;
                    default:
                        const amount = parseInt(text);
                        const toNickname = $btn.data('to-nickname');
                        const confirmMessage = `确认要向 ${toNickname || '目标用户'} 转账 ${amount} 元吗？`;

                        // 使用jQuery WeUI的确认对话框
                        $.confirm({
                            title: '确认转账',
                            text: confirmMessage,
                            onOK: async function () {
                                await recordTransaction($btn, amount);
                            },
                            onCancel: function () {
                                // 用户取消操作
                                return;
                            }
                        });
                        break;
                }
            });
        }

        async function recordTransaction($btn, amount){
            const fromUserId = parseInt($btn.data('from-user-id'));
            const toUserId = parseInt($btn.data('to-user-id'));
            const gameId = parseInt($btn.data('game-id'));

            // 按钮状态处理
            $btn.prop('disabled', true).css('background-color', '#ccc');

            try {
                const response = await fetch('@Url.Action("RecordTransaction", "Game")', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({
                        GameId: gameId,
                        FromUserId: fromUserId,
                        ToUserId: toUserId,
                        Amount: amount
                    })
                });

                const result = await response.json();

                if (!result.success) {
                    $.toptip('记录失败: ' + (result.message || '未知错误'), 'error');
                } else {
                    $.toptip('记录成功', 'success');
                }
            } catch (error) {
                console.error('提交失败:', error);
                $.toptip('提交失败，请重试', 'error');
            } finally {
                // 恢复按钮状态
                $btn.prop('disabled', false).css('background-color', '');
            }
        }

        // 初始化准备按钮事件
        function initReadyButton() {
            const $readyButton = $('#readyButton');
            if ($readyButton.length === 0) return;

            $readyButton.off('click').on('click', async function() {
                const $btn = $(this);
                const gameId = parseInt($btn.data('game-id'));
                const isReady = $btn.data('is-ready') === true;
                const newReadyState = !isReady;

                // 防止重复点击
                if ($btn.hasClass('loading')) {
                    return;
                }

                // 保存原始内容和状态
                const originalHtml = $btn.html();
                const originalClasses = $btn.attr('class');

                // 显示加载状态
                $btn.addClass('loading')
                    .html('<i class="fa fa-spinner fa-spin"></i><span>处理中...</span>');

                try {
                    const response = await fetch('@Url.Action("ToggleReady", "Game")', {
                        method: 'POST',
                        headers: { 'Content-Type': 'application/json' },
                        body: JSON.stringify({
                            gameId: gameId,
                            isReady: newReadyState
                        })
                    });

                    const result = await response.json();

                    if (result.success) {
                        $btn.data('is-ready', newReadyState)
                            .removeClass('cancel-ready loading')
                            .addClass(newReadyState ? 'cancel-ready' : '');

                        if (newReadyState) {
                            $btn.html('<i class="fa fa-times"></i><span>取消准备</span>');
                            $.toptip('已准备结束牌局', 'success');
                        } else {
                            $btn.html('<i class="fa fa-check"></i><span>准备结束</span>');
                            $.toptip('已取消准备', 'success');
                        }
                    } else {
                        // 恢复原始状态
                        $btn.attr('class', originalClasses)
                            .html(originalHtml);
                        $.toptip('操作失败: ' + (result.message || '未知错误'), 'error');
                    }
                } catch (error) {
                    console.error('准备状态更新失败:', error);
                    // 恢复原始状态
                    $btn.attr('class', originalClasses)
                        .html(originalHtml);
                    $.toptip('操作失败，请重试', 'error');
                } finally {
                    $btn.removeClass('loading');
                }
            });
        }

        // 初始化查看结算按钮事件
        function initResultButton() {
            const $resultButton = $('#resultButton');
            if ($resultButton.length === 0) return;

            $resultButton.off('click').on('click', function() {
                window.location.href = `@Url.Action("Result", "Game", new { gameId = Model.Game.Id })`;
            });
        }
    </script>
</body>

</html>